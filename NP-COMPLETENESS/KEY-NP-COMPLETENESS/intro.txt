/********************************************************************************/
MATHEMATICAL LINGO (PAUL'S ONLINE NOTES)  ==> https://tutorial.math.lamar.edu/ OR GOOGLE IT :|
GLOSARY BEFORE YOU READ THIS! (THEORY OF COMPUTATION/FLAT)
1) M ==> M/C ==> MACHINE ==> Deterministic FINITE AUTOMATON (DFA)
2) L ==> Language accepted by M/C && M/C being accepted by L
3) CIRCUIT SATURATION ( CIR SAT.d) A.K.A COOK-LEVIN THEOREM

/************************************************************************************************/
Lemma1 : {L_1 ---via poly---> L_2} ==> {L_2 ---via poly---> L_3} then {L_1 ---via poly---> L_3}
Proof1 : IT CAN BE PROVED BY TRANSITIVE PROPERTY

/************************************************************************************************/
//**NP-COMPLETE THEOREMS

1) Lemma2 : HAMILTONIAN CYClE is in NP
   Proof2 : HAMILTONIAN CYCLE ==> O()

2) Lemma3 : L accepted by Polynomial time iff L cannot be accepted in 
            Polynomial time
   Proof3 : USING PROOF BY CONTRADICTION

3) *Cover
a) Lemma3 : VERTEX is in NP
   Proof3 : VertexCover = { Graph(Nodes, Edges) : 0 <= Nodes, Edges <= (+ Infinity) }
            ==> G(N,E) : 0 <= k <= N ~= NP
            P ~= 0 <= k <= 1
           COMPARING P and NP AND COMBINE THEM
           P ~= 0 <= k <= 1 <= N ~= NP
           P ~= 0 <= k <= 1 ~= NP
           Therefore, VertexCover is in NP
   Lemma3.1 : VertexCover == G representing a computer network where 
              V (vertices) == > routers and E (edges) == > physical connections.
              We wish to upgrade V in G with special new, but expensive, 
              routers. ∃ (There Exists) k new routers : ∀ (for every) network
   Proof3.1 :  Use Lemma3.1 to prove it :) :) 

b) Lemma3 : SET is in NP
   Proof3 : SetCover = { ∑ S_i : 0 <= i <= (+ INFINITY) } == > { ∑ S_i : 0 <= i <= m }
            == > { ∑ S_j : 0 <= i,j <= m } ==> { ∑ S_j : 0 <= j <= n }
            P ~= { ∑ S_j : 0 <= j <= n }
            NP ~= { ∑ S_i : 0 <= i <= m }
            P ~= NP
            P is in NP, Hence proved!
b) Lemma3 : CLIQUE is in NP
   Proof3 : Clique = { : }

4) *SATURATION
a) Lemma4 : CNF-SATD. IS IN NP (POS-SATD) or (+)-SATD.
   Proof4 :
b) Lemma4 : 3SAT IS IN NP
   Proof4 :
c) Lemma4 : CIR SAT.d is in NP or CIR SATD. IS ( PROPER SUBSET && = ) TO NP
   Proof4 : LET NP BE A UNIVERSAL SET && CIR SATD. TO BE A part OF UNIVERsaL (CIR SAtD. ==> SET A)
            USE YOUR NORMAL SET RULES AND OPERATIONS TO PROVE IT :)

/********************************************************************************************************/
BASIC LAYOUT :

ALGO KEY_NP(){
1) L within NP
2) REDUCE TO KNOWN NP-COMPLETE PROBLEM ==> L in POLYNOMIAL
3) SHOWING L is NP-HARD
//-----------------------------------------------------------------------------------------------------------
** REDUCTIONS : for eqt^n 2) **
1) RESTRICTION == CHOOSE NP-COMPLETE i.e CLOSELY RELATED to L in Polynomial, 
simplify KNWOWN NP-COMPLETE.

2) LOCAL REPLACEMENT == AFTER 1) USE SUBSTITUTION FOR DIVIDING NP-COMPLETE ==> L && M as 
infinite number of sets

3) COMPONENT DESIGN == STRICTLY REDUCES KNOWN NP_COMPLETE to M to L Via CHOICES and 
strict prioritization (evaluation funct^n)
//-------------------------------------------------------------------------------------------------------------
}//EOF KEY_NP
/**********************************************************************************************************/

   COMPILER DESIGN -------------|
          ||                    |
      SATURATION                |
          ||                    |               
   |---LOCAL REPO---|           |
CIRCUIT   ||        3           |
          ||        ||          |
          ||   VERTEX-COVER  <= |
      CNF / SOP     ||
               COMPILER DES.
                    ||
         |-----------------------|
    SUM-OF-SUBSETS      HAMILTONIAN CYClE
         ||-------RESTRICTION-------||
    KAPSACK-0/1          TRAVELLING-SALES-PERSON (TSP)
//-----------------------------------------------------
**AFTER VERTEX COVER
LOCAL REPOSITORY (GIT/GIT-BASH) |==> CLIQUE
                                |
                                |==> SET-COVER
//-------------------------------------------------------
CONQUER BOTH OF THEM 
//-------------------------------------------------------
THE END ;);)

