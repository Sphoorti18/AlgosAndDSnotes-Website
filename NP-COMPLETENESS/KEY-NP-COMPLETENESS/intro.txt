/********************************************************************************/
GLOSARY BEFORE YOU READ THIS! (THEORY OF COMPUTATION/FLAT)
1) M ==> M/C ==> MACHINE ==> Deterministic FINITE AUTOMATON (DFA)
2) L ==> Language accepted by M/C && M/C being accepted by L 
/********************************************************************************/
Lemma : {L_1 ---via poly---> L_2} ==> {L_2 ---via poly---> L_3} then {L_1 ---via poly---> L_3}
Proof : IT CAN BE PROVED BY TRANSITIVE PROPERTY
/********************************************************************************/
BASIC LAYOUT :

ALGO KEY_NP(){
1) L within NP
2) REDUCE TO KNOWN NP-COMPLETE PROBLEM ==> L in POLYNOMIAL
3) SHOWING L is NP-HARD
//----------------------------------------------------------------
** REDUCTIONS : for eqt^n 2) **
1) RESTRICTION == CHOOSE NP-COMPLETE i.e CLOSELY RELATED to L in Polynomial, 
simplify KNWOWN NP-COMPLETE.

2) LOCAL REPLACEMENT == AFTER 1) USE SUBSTITUTION FOR DIVIDING NP-COMPLETE ==> L && M as 
infinite number of sets

3) COMPONENT DESIGN == STRICTLY REDUCES KNOWN NP_COMPLETE to M to L Via CHOICES and 
strict prioritization (evaluation funct^n)
//----------------------------------------------------------------
}//EOF KEY_NP
/********************************************************************************/
